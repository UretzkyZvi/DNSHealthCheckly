import Head from "next/head";
import {
  Card,
  Grid,
  Title,
  Text,
  Tab,
  TabList,
  TabGroup,
  TabPanel,
  TabPanels,
  Color,
  Flex,
  Icon,
  Tracker,
  Subtitle,
} from "@tremor/react";

import { api } from "~/utils/api";
import { useEffect, useState } from "react";
import { Settings } from "~/lib/dtos/settings.dto";
import { Metrics } from "~/lib/dtos/metrics.dto";
import { ServerHealth } from "~/lib/dtos/server-health.dto";
import {
  ArrowDownCircleIcon,
  CheckCircleIcon,
  CogIcon,
  MinusCircleIcon,
} from "@heroicons/react/20/solid";
import { DateTime } from "luxon";
import MetricsTable from "~/components/metrics-table";
import ResponseTimeChart, {
  ResponseTimeValue,
} from "~/components/response-time-chart";
import TTLChart, { TTLValue } from "~/components/ttl-chart";
import { SettingsPanel } from "~/components/settings-panel";
import { NextPage } from "next";
interface Tracker {
  color: Color;
  tooltip: string;
}

const Home: NextPage = () =>{
  const [settings, setSettings] = useState<Settings>();
  const [metrics, setMetrics] = useState<Metrics[]>([]);
  const [serverHealth, setServerHealth] = useState<ServerHealth[]>([]);
  const [serverHealthTracker, setServerHealthTracker] = useState<Tracker[]>([]);
  const [responseTimeChart, setResponseTimeChart] = useState<
    ResponseTimeValue[]
  >([]);
  const [ttlChart, setTTLChart] = useState<TTLValue[]>([]);
  const settingsQuery = api.healthCheckerRouter.getSettings.useQuery();

  const retrieveMetrics = api.healthCheckerRouter.getMetrics.useQuery(
    {
      nameServer: settings?.domain,
      limit: 10,
    },
    {
      enabled: settings !== undefined ? true : false,
      refetchInterval:
        settings !== undefined ? settings?.checkInterval * 1000 : 0,
    },
  );
  const serverHealthQuery = api.healthCheckerRouter.getServerHealth.useQuery(
    {
      serverName: settings?.domain,
      limit: 10,
    },
    {
      enabled: settings !== undefined ? true : false,
      refetchInterval:
        settings !== undefined ? settings?.checkInterval * 1000 : 6000,
    },
  );

  const updateSettingsMutation =
    api.healthCheckerRouter.setSettings.useMutation();

  useEffect(() => {
    if (settingsQuery.data) {
      setSettings(settingsQuery.data);
    }
    if (retrieveMetrics.data) {
      setMetrics(retrieveMetrics.data);
    }
    if (serverHealthQuery.data) {
      setServerHealth(serverHealthQuery.data);
    }
  }, [settingsQuery.data, retrieveMetrics.data, serverHealthQuery.data]);

  useEffect(() => {
    if (metrics) {
      const responseTimeChart: ResponseTimeValue[] = [];
      const ttlChart: TTLValue[] = [];
      metrics
        .sort((a, b) => a.id - b.id)
        .map((metric) => {
          responseTimeChart.push({
            name: DateTime.fromISO(metric.time).toFormat("dd/MM HH:mm:ss"),
            "Response Time": metric.metrics.responseTime,
          });
          ttlChart.push({
            name: DateTime.fromISO(metric.time).toFormat("dd/MM HH:mm:ss"),
            "TTL Value": metric.metrics.ttl,
          });
        });
      setResponseTimeChart(responseTimeChart);
      setTTLChart(ttlChart);
    }
    if (serverHealth) {
      const tracker: Tracker[] = [];
      serverHealth
        .sort(
          (a, b) =>
            DateTime.fromISO(a.time).toMillis() -
            DateTime.fromISO(b.time).toMillis(),
        )
        .map((server) => {
          if (server.is_valid === true) {
            tracker.push({ color: "emerald", tooltip: "Server is healthy" });
          } else {
            tracker.push({ color: "rose", tooltip: "Server is unhealthy" });
          }
        });
      setServerHealthTracker(tracker);
    }
  }, [metrics, serverHealth]);

  const handleResetSettings = async () => {
    await updateSettingsMutation.mutateAsync({
      checkInterval: 10,
      domain: "www.google.com",
      metrics: ["responseTime", "statusCode"],
      region: "Global",
      thresholds: {
        responseTime: 200,
        statusCode: "NOERROR",
      },
    });
  };

  const handleUpdateSettings = async (updatedSettings: Settings) => {
    try {
      await updateSettingsMutation.mutateAsync(updatedSettings);
      await settingsQuery.refetch();
    } catch (error) {
      console.error("Failed to update settings:", error);
    }
  };

  return (
    <>
      <Head>
        <title>DNS HealthCheckly</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="p-12">
        <Title>DNS HealthCheckly Dashboard</Title>
        <Text></Text>

        <TabGroup className="mt-6">
          <TabList>
            <Tab>Monitoring</Tab>
            <Tab>Monitoring Configuration Settings</Tab>
          </TabList>
          <TabPanels>
            <TabPanel>
              <Grid numItemsMd={2} numItemsLg={3} className="mt-6 gap-6">
                <Card>
                  <Title>DNS Response Time Over Last 10 Checks (ms)</Title>
                  <Subtitle>
                    This chart displays the response time in milliseconds for
                    each of the last 10 DNS checks.
                  </Subtitle>
                  <ResponseTimeChart data={responseTimeChart} />
                </Card>
                <Card>
                  <div className="h-28">
                    <Title>DNS Time to Live Over Last 10 Checks (s)</Title>
                    <Subtitle>
                      This chart displays the Time-to-Live (TTL) values over the
                      last 10 checks, helping you understand the DNS server's
                      caching performance.
                    </Subtitle>
                    <TTLChart data={ttlChart} />
                  </div>
                </Card>
                <Card>
                  <div>
                    <Title className="w-full">Server health status</Title>
                    <Subtitle>
                      The tracker below gives you a quick snapshot of your
                      server's health status. Each color represents a different
                      state of operation or health
                    </Subtitle>
                    <Flex justifyContent="end" className="-mr-2 -space-x-2">
                      <Icon
                        icon={CheckCircleIcon}
                        color="emerald"
                        tooltip="Operational"
                      />
                      <Icon
                        icon={ArrowDownCircleIcon}
                        color="yellow"
                        tooltip="Degraded"
                      />
                      <Icon icon={CogIcon} color="gray" tooltip="Maintenance" />
                      <Icon
                        icon={MinusCircleIcon}
                        color="rose"
                        tooltip="Downtime"
                      />
                    </Flex>
                  </div>
                  <Tracker data={serverHealthTracker} className="mt-2" />
                </Card>
              </Grid>
              <div className="mt-6">
                <Card>
                  <div>
                    <Title>Latest DNS Health Checks</Title>
                    <Subtitle>
                      This table provides a comprehensive overview of the DNS
                      metrics for each of the recent checks. It includes
                      response time, status codes, Time-to-Live (TTL), and other
                      essential data to help you understand your DNS
                      performance.
                    </Subtitle>
                    <MetricsTable metrics={metrics} />
                  </div>
                </Card>
              </div>
            </TabPanel>

            <TabPanel>
              <div className="mt-6">
                {settings && (
                  <SettingsPanel
                    settings={settings}
                    updateSettings={handleUpdateSettings}
                    resetSettings={handleResetSettings}
                  />
                )}
              </div>
            </TabPanel>
          </TabPanels>
        </TabGroup>
      </main>
    </>
  );
}

export default Home;